x
x %>% unique(states)
x %>% unique()
x$state
unique(x$state)
user <- us_stations %>% filter(states="California" & states = "Arizona")
user <- us_stations %>% filter(states="California" & states == "Arizona")
user <- us_stations %>% filter(states="California" && states == "Arizona")
colnames(us_stations)
user <- us_stations %>% filter(state="California" && state == "Arizona")
user <- us_stations %>% filter(state="California" & state == "Arizona")
user <- us_stations %>% filter(state=="California" & state == "Arizona")
head(user)
user <- us_stations %>% filter(state=="California" && state == "Arizona")
head(user)
user <- subset(us_stations, c("California", "Arizona") %in% us_stations$state)
head(user)
counties <- c("Arizona", "Washington")
states <- c("California", "Washington", "Arizona", "Colorado")
states-counties
setdiff(states, counties)
user
rownames(user)
user %>% rownames()
slice(user, rownames(user)[1:10])
rownames(user)[1:10]
user %>% as.integer(rownames())
merge()
run()
c(1, 2, 3) + c(1,2,3, 4)
union(c(1,2,3), c(1,2,3,4))
run()
runApp()
slice(user, 1:10)
slice(user, 69)
slice(user, c(69, 420)
)
as.integer(rownames(user))
union(as.integer(rownames(user[1:10, ])), as.integer(rownames(user[40:50, ])))
run()
run()
run()
run()
user[state == "California", ]
user[user$state == "California", ]
run()
run()
slice(user, 10)
user[10, ]
run()
run()
run()
run()
run()
run()
user[c(1, 69, 420), ]
run()
run()
run()
unique(user$state)
ex <- us_stations %>% subset(state %in% c("California", "Arizona"))
ex
ex[38938, ]
nrow(ex)
us_statoins %>% filter(state=="California") %>% nrow()
us_statins %>% filter(state=="California") %>% nrow()
us_stations %>% filter(state=="California") %>% nrow()
run()
run()
run()
run()
user[3255, ]
user
ex
rownames(ex)
tail(rownames(ex))
run()
run()
run()
run()
?sidebarLayout
run()
?leafletOutput
run()
run()
run()
setwd('~/classroom/capstone')
source('app.r')
run()
publish()
run()
run()
run()
run()
1:0
run()
run()
run()
run()
run()
run()
run()
run()
Date()
date()
date(format="%Y-%m-%d")
as.Date(date())
mydates <- as.Date(c("2007-06-22", "2004-02-13"))
mydates[1] - mydates[2]
mydates <- as.Date(c("2007-06-22", "2004-02-13"), fmt="%Y")
mydates
mydates <- as.Date(c("2007-06-22", "2004-02-13"), format="%Y")
mydates
format(mydates[1], format="%Y")
format(mydates[1], format="%Y") - format(mydates[2], format="%Y")
mydates[2]
as.integer(format(mydates[1], format="%Y")) - as.integer(format(mydates[2], format="%Y"))
run()
run()
run()
run()
format("2022-05-16", format="%Y")
format(as.Date("2022-05-16"), format="%Y")
run()
run()
date()
?date
Sys.Date()
run()
?dateRangeInput
run()
run()
?slidyInput
?sliderInput
run()
run()
run()
run()
run()
is.na(NA)
run()
run()
data <- get_data("GSUM", c("2022-04-01", Sys.Date()))
data <- get_data("GSUM", c(Sys.Date()-1, Sys.Date()))
data
Sys.Date()
data <- get_data("GSUM", c(as.Date("2022-04-01"), as.Date("2022-05-01")))
data
data <- get_data("GSOM", c(as.Date("2022-04-01"), as.Date("2022-05-01")))
data
?content
data <- get_data("GSOM", c(as.Date("2022-04-01"), as.Date("2022-05-01")))
source('weather.R')
data <- get_data("GSOM", c(as.Date("2022-04-01"), as.Date("2022-05-01")))
data <- get_data("GSOM", c(as.Date("1763-01-01"), as.Date("1764-01-01")))
us_stations %>% filter(id == "ITE00100554")
?sliderInput
run()
run()
?numericInput
run()
run()
run()
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
# Create 0-row data frame which will be used to store data
dat <- data.frame(x = numeric(0), y = numeric(0))
withProgress(message = 'Making plot', value = 0, {
# Number of times we'll go through the loop
n <- 10
for (i in 1:n) {
# Each time through the loop, add another row of data. This is
# a stand-in for a long-running computation.
dat <- rbind(dat, data.frame(x = rnorm(1), y = rnorm(1)))
# Increment the progress bar, and update the detail text.
incProgress(1/n, detail = paste("Doing part", i))
# Pause for 0.1 seconds to simulate a long computation.
Sys.sleep(0.1)
}
})
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
plotOutput('plot', width = "300px", height = "300px"),
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
# Create 0-row data frame which will be used to store data
dat <- data.frame(x = numeric(0), y = numeric(0))
withProgress(message = 'Making plot', value = 0, {
# Number of times we'll go through the loop
n <- 10
for (i in 1:n) {
# Each time through the loop, add another row of data. This is
# a stand-in for a long-running computation.
dat <- rbind(dat, data.frame(x = rnorm(1), y = rnorm(1)))
# Increment the progress bar, and update the detail text.
incProgress(1/n, detail = paste("Doing part", i))
# Pause for 0.1 seconds to simulate a long computation.
Sys.sleep(0.1)
}
})
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
plotOutput('plot', width = "300px", height = "300px"),
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
run()
run()
run()
knitr::opts_chunk$set(echo = TRUE)
library(gridExtra)
library(grid)
library(ggplot2)
library(gridExtra)
library(tidyverse)
library(jpeg)
library(plotly)
library(reticulate)
library(gsignal)
use_python('/usr/local/bin/python3')
setwd("~/classroom/csci551/final_project")
gaussian <- function(x) {
part1 <- 1 / sqrt(2*pi*sd(x))
part2 <- exp(1)^((-x^2)/(2*(sd(x)^2)))
return(part1*part2)
}
gaussian2d <- function(x, y) {
part1 <- 1 / (2*pi*sd(x*y)^2)
part2 <- exp(1)^((-(x^2+y^2))/(2*(sd(x*y)^2)))
return(part1*part2)
}
#The weight sets the standard deviation of the bell curve
#We will explore this later!
gaussian2d_fixed <- function(x, y, weight) {
part1 <- 1 / (2*pi*(weight^2))
part2 <- exp(1)^((-(x^2+y^2))/(2*(weight^2)))
return(part1*part2)
}
gaussian_integral <- function(x) {
return(exp(-x^2))
}
x <- y <- seq(-4, 4, .1)
gauss <- ggplot(mapping=aes(x, y=gaussian(x))) + geom_line() +
ggtitle("Gaussian function")
# gauss2d <- persp(x, y, z=outer(x,y,gaussian2d),
#                  theta=20, main="2 Dimensional Gaussian Function")
gauss2d_interactive <- plot_ly(x=~x, y=~y, z=~outer(x, y, gaussian2d)) %>%
add_surface() %>%
layout(title="2 Dimensional Gaussian Function") %>%
layout(xaxis=(list(fixedrange=TRUE))) %>%
layout(yaxis=(list(fixedrange=TRUE)))
gauss_integral <- ggplot(mapping=aes(x, y=gaussian_integral(x))) + geom_line() +
ggtitle("Gaussian Integral")
grid.arrange(gauss, gauss_integral, nrow=2)
gauss2d_interactive
img <- readJPEG('images/noisy.jpeg')
red <- img[,,1]
green <- img[,,2]
blue <- img[,,3]
df <- data.frame(red=c(red), green=c(green), blue=c(blue))
df <- pivot_longer(df, cols=c('red', 'green', 'blue'), names_to = 'color')
dist <- ggplot(df, aes(x=value, group=color, colour=color)) +
geom_density(kernel='gaussian') +
scale_color_manual(values=c('blue', 'green', 'red')) +
ggtitle('Pixel Density')
#Plot image and graph
grid.arrange(rasterGrob(img), dist, nrow=2,
top=textGrob("A Noisy Image"))
img <- readJPEG('output/my_noisy.jpeg')
red <- img[,,1]
green <- img[,,2]
blue <- img[,,3]
df <- data.frame(red=c(red), green=c(green), blue=c(blue))
df <- pivot_longer(df, cols=c('red', 'green', 'blue'), names_to = 'color')
dist <- ggplot(df, aes(x=value, group=color, colour=color)) +
geom_density(kernel='gaussian') +
scale_color_manual(values=c('blue', 'green', 'red')) +
ggtitle('Pixel Density')
#Plot image and graph
grid.arrange(rasterGrob(img), dist, nrow=2,
top=textGrob("The Noisy Image Smoothed"))
#Kernel size 5
gaussian2d_fixed <- function(x, y, weight) {
part1 <- 1 / (2*pi*(weight^2))
part2 <- exp(1)^((-(x^2+y^2))/(2*(weight^2)))
return(part1*part2)
}
x <- c(2, 1, 0, 1, 2,
2, 1, 0, 1, 2,
2, 1, 0, 1, 2,
2, 1, 0, 1, 2,
2, 1, 0, 1, 2)
y <- c(2, 2, 2, 2, 2,
1, 1, 1, 1, 1,
0, 0, 0, 0, 0,
1, 1, 1, 1, 1,
2, 2, 2, 2, 2)
sd <- 1.0
k1 <- gaussian2d_fixed(x, y, sd)
k2 <- gaussian2d_fixed(x, y, 3.0)
#Blurs an image by applying 2d convolution with gaussian filter
blur_rgb_img <- function(img, kernel) {
red <- img[,,1]
green <- img[,,2]
blue <- img[,,3]
r <- conv2(red, kernel, 'valid')
g <- conv2(green, kernel, 'valid')
b <- conv2(blue, kernel, 'valid')
rgb <- array(dim=c(dim(b), 3))
rgb[,,1] <- r
rgb[,,2] <- g
rgb[,,3] <- b
return(rgb)
}
#Plot 2 different examples of blured image with different weights
noisy_og <-readJPEG('images/western_poison_oak_images/western_poison_oak1.jpeg')
noisy_blur <- blur_rgb_img(noisy_og, k1)
noisy_blur5 <- blur_rgb_img(noisy_og, k2)
dandelion_og <- readJPEG('images/flowers/dandelion/flower829.jpeg')
dandelion_blur <- blur_rgb_img(dandelion_og, k1)
dandelion_blur5 <- blur_rgb_img(dandelion_og, k2)
layout <- c(3,2)
op <- par(
mar = c(1, 1, 1, 1),
mfrow = layout,
bty = "n",
omi = c(0, 0, 0, 0),
oma = c(0, 1, 2, 0)
)
#First image
dims <- dim(noisy_og)
plot(
c(0, dims[1]),
c(dims[2], 0),
type = "n",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n",
frame.plot = FALSE,
)
rasterImage(noisy_og, 0, 0, dims[1], dims[2], interpolate = FALSE)
mtext("Original", side=2, cex=1)
#Second image
dims <- dim(dandelion_og)
plot(
c(0, dims[1]),
c(dims[2], 0),
type = "n",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n",
frame.plot = FALSE,
)
rasterImage(dandelion_og, 0, 0, dims[1], dims[2], interpolate = FALSE)
#Third image
dims <- dim(noisy_blur)
plot(
c(0, dims[1]),
c(dims[2], 0),
type = "n",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n",
frame.plot = FALSE,
)
rasterImage(noisy_blur, 0, 0, dims[1], dims[2], interpolate = FALSE)
mtext("sd = 1", side=2, cex=1)
#Fourth image
dims <- dim(dandelion_blur)
plot(
c(0, dims[1]),
c(dims[2], 0),
type = "n",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n",
frame.plot = FALSE,
)
rasterImage(dandelion_blur, 0, 0, dims[1], dims[2], interpolate = FALSE)
#Fifth image
dims <- dim(noisy_blur5)
plot(
c(0, dims[1]),
c(dims[2], 0),
type = "n",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n",
frame.plot = FALSE,
)
rasterImage(noisy_blur5, 0, 0, dims[1], dims[2], interpolate = FALSE)
mtext("sd = 3", side=2, cex=1)
#Sixth image
dims <- dim(dandelion_blur5)
plot(
c(0, dims[1]),
c(dims[2], 0),
type = "n",
xlab = "",
ylab = "",
xaxt = "n",
yaxt = "n",
frame.plot = FALSE,
)
rasterImage(dandelion_blur5, 0, 0, dims[1], dims[2], interpolate = FALSE)
mtext(text="Gaussian Smoothing", outer=TRUE, cex=1.5)
par(op)
#Kernel size 3
x <- c(1, 0, 1,
1, 0, 1,
1, 0, 1)
y <- c(1, 1, 1,
0, 0, 0,
1, 1, 1)
z <- gaussian2d_fixed(x, y, 5.5)
z <- z * (1 / sum(z))
z <- array(z, dim=c(sqrt(length(x)), sqrt(length(y))))
discrete_gauss3x3 <- plot_ly(x=~x, y=~y, z=~z) %>%
add_surface() %>%
layout(title="Discrete Approximation Kernel 3x3",
xaxis=(list(fixedrange=TRUE)),
yaxis=list(fixedrange=TRUE))
#Kernel size 5
x <- c(2, 1, 0, 1, 2,
2, 1, 0, 1, 2,
2, 1, 0, 1, 2,
2, 1, 0, 1, 2,
2, 1, 0, 1, 2)
y <- c(2, 2, 2, 2, 2,
1, 1, 1, 1, 1,
0, 0, 0, 0, 0,
1, 1, 1, 1, 1,
2, 2, 2, 2, 2)
z1_weight <- 1.0
z2_weight <- 5.0
z3_weight <- 10.0
z1 <- gaussian2d_fixed(x, y, z1_weight)
z2 <- gaussian2d_fixed(x, y, z2_weight)
z3 <- gaussian2d_fixed(x, y, z3_weight)
z1 <- z1 * (1 / sum(z1))
z2 <- z2 * (1 / sum(z2))
z3 <- z3 * (1 / sum(z3))
z1 <- array(z1, dim=c(sqrt(length(x)), sqrt(length(x))))
z2 <- array(z2, dim=c(sqrt(length(x)), sqrt(length(x))))
z3 <- array(z3, dim=c(sqrt(length(x)), sqrt(length(x))))
discrete_gauss5x5 <- plot_ly(x=~x, y=~y, z=~z1) %>%
add_surface() %>%
layout(title="Discrete Approximation Kernel 5x5")
z <- data.frame(z1=c(z1), z2=c(z2), z3=c(z3))
z <- pivot_longer(z, cols=c('z1', 'z2', 'z3'), names_to='weight')
colors <- c("#FDAE61", "#0000FF", "#00FF00")
plot(c(z1), col=colors[1], type='b', xlab="", xaxt="n",
main='Discrete Approximation of Gaussian Distribution')
legend("topright",
legend = c(
paste("Weight =", z1_weight)
# paste("Weight =", z2_weight),
# paste("Weight =", z3_weight)
),
pch=19,
col = colors[1])
# Calculate the output size of image after applying filter and convolution
# dim is width or height of image
# ksize is size of kernal
# padding is if we want a border or something like that
# stride is how much the filter increments by
new_size <- function(dim, ksize, padding, stride) {
return(((dim-ksize+2*padding)/1)+1)
}
reticulate::repl_python()
seq <- read.csv("seq_times.csv")
thread4 <- read.csv("hyper4.csv")
thread8 <- read.csv("hyper8.csv")
thread12 <- read.csv("hyper12.csv")
common <- Reduce(intersect, list(seq$file, thread4$file,
thread8$file, thread12$file))
seq <- seq[seq$file %in% common, ]
thread4 <- thread4[thread4$file %in% common, ]
thread8 <- thread8[thread8$file %in% common, ]
thread12 <- thread12[thread12$file %in% common, ]
seq <- cbind(seq, id="seq", x=1:length(common))
thread4 <- cbind(thread4, id="thread4", x=1:length(common))
thread8 <- cbind(thread8, id="thread8", x=1:length(common))
thread12 <- cbind(thread12, id="thread12", x=1:length(common))
df <- full_join(full_join(seq, thread4),
full_join(thread8, thread12))
reg <- ggplot(df, aes(x, y=time, group=id, colour=id)) +
geom_point() + geom_line() +
theme(axis.ticks.x=element_blank(),
axis.text.x.bottom = element_blank()) +
ggtitle("Original data") +
xlab("Image") + ylab("Time")
smooth <- ggplot(df, aes(x, y=time, group=id, colour=id)) +
geom_smooth(method='loess', se=FALSE) +
theme(axis.ticks.x=element_blank(),
axis.text.x.bottom = element_blank()) +
ggtitle("Smoothed")
grid.arrange(reg, smooth, nrow=2, top="Image Convolution Speedup")
