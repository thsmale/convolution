import pandas as pd
import numpy as np
import re
import statistics
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import pandas as pd
import numpy as np
import re
import statistics
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
def read_text_file(filename):
with open(filename) as r:
text = r.read()
return text
#Or any word that is not in the dictionary
#   Side effect is typos wont be included
#   So may spell check
#Phone numbers
#There better be no commas preston
def clean_data(data):
data = data.lower()
data = data.split()
data = re.findall(r"[a-zA-Z0-9-+#$%@']*", ' '.join(data))
data = list(filter(None, data))
return data
def str_convert_ascii(data):
ascii_vals = [i for i in range(0, len(data))]
for i in range(0, len(data)):
word = data[i]
ascii_vals[i] = sum([ord(word[i]) for i in range(0, len(word))])
return ascii_vals
#Read the resume
resume = read_text_file("resume.txt")
job_desc = read_text_file("job_description.txt")
#Clean data
resume = clean_data(resume)
job_desc = clean_data(job_desc)
#Convert to int
resume = str_convert_ascii(resume)
job_desc = str_convert_ascii(job_desc)
#Only want unique values
resume = list(dict.fromkeys(resume))
job_desc = list(dict.fromkeys(job_desc))
size_diff = len(job_desc) - len(resume)
size_diff = [statistics.median(resume) for i in range(0, size_diff)]
resume.extend(size_diff)
resume.sort()
job_desc.sort()
matches = {'res': resume, 'desc': job_desc}
matches = pd.DataFrame(data=matches)
#Word match percentage
match = 0
#This is really odd i need to get the unique values even though they are
#already unique. 1792 in matches.desc doesn't work neither does loc
desc_words = matches.desc.unique()
for word in matches.res.unique():
if(word in desc_words):
match += 1
match_percentage = int((match / len(matches.desc)) * 100)
print("Word match percentage: %" + str(match_percentage))
#Fit a model
reg = LinearRegression().fit(np.array(matches.res).reshape(-1, 1),
np.array(matches.desc).reshape(-1, 1))
print("Score:", reg.score(np.array(matches.res).reshape(-1, 1),
np.array(matches.desc).reshape(-1, 1)))
#Need to do a train test split
#Need test data
predictions = [i for i in range(0, len(matches.res))]
for i, word in enumerate(matches.res):
predictions[i] = reg.predict(np.array([[word]]))[0]
#Lets visualize the correlation
plt.plot(np.array(matches.res).reshape(-1, 1),
np.array(matches.desc).reshape(-1, 1), 'k.')
plt.plot(np.array(matches.res).reshape(-1, 1),
reg.predict(np.array(matches.res).reshape(-1, 1)),
color = 'red')
plt.show()
import pandas as pd
import numpy as np
import re
import statistics
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
def read_text_file(filename):
with open(filename) as r:
text = r.read()
return text
#Or any word that is not in the dictionary
#   Side effect is typos wont be included
#   So may spell check
#Phone numbers
#There better be no commas preston
def clean_data(data):
data = data.lower()
data = data.split()
data = re.findall(r"[a-zA-Z0-9-+#$%@']*", ' '.join(data))
data = list(filter(None, data))
return data
def str_convert_ascii(data):
ascii_vals = [i for i in range(0, len(data))]
for i in range(0, len(data)):
word = data[i]
ascii_vals[i] = sum([ord(word[i]) for i in range(0, len(word))])
return ascii_vals
#Read the resume
path = "/Users/tommysmale/classroom/math485/hugo/content/post/2022-02-11-viewing-your-qualifications-for-a-job/"
resume = read_text_file(path+"resume.txt")
job_desc = read_text_file(path+"job_description.txt")
#Clean data
resume = clean_data(resume)
job_desc = clean_data(job_desc)
#Convert to int
resume = str_convert_ascii(resume)
job_desc = str_convert_ascii(job_desc)
#Only want unique values
resume = list(dict.fromkeys(resume))
job_desc = list(dict.fromkeys(job_desc))
size_diff = len(job_desc) - len(resume)
size_diff = [statistics.median(resume) for i in range(0, size_diff)]
resume.extend(size_diff)
resume.sort()
job_desc.sort()
matches = {'res': resume, 'desc': job_desc}
matches = pd.DataFrame(data=matches)
#Word match percentage
match = 0
#This is really odd i need to get the unique values even though they are
#already unique. 1792 in matches.desc doesn't work neither does loc
desc_words = matches.desc.unique()
for word in matches.res.unique():
if(word in desc_words):
match += 1
match_percentage = int((match / len(matches.desc)) * 100)
print("Word match percentage: %" + str(match_percentage))
#Fit a model
reg = LinearRegression().fit(np.array(matches.res).reshape(-1, 1),
np.array(matches.desc).reshape(-1, 1))
print("Score:", reg.score(np.array(matches.res).reshape(-1, 1),
np.array(matches.desc).reshape(-1, 1)))
#Need to do a train test split
#Need test data
predictions = [i for i in range(0, len(matches.res))]
for i, word in enumerate(matches.res):
predictions[i] = reg.predict(np.array([[word]]))[0]
#Lets visualize the correlation
plt.plot(np.array(matches.res).reshape(-1, 1),
np.array(matches.desc).reshape(-1, 1), 'k.')
plt.plot(np.array(matches.res).reshape(-1, 1),
reg.predict(np.array(matches.res).reshape(-1, 1)),
color = 'red')
plt.show()
#Lets visualize the correlation
plt.plot(np.array(matches.res).reshape(-1, 1),
np.array(matches.desc).reshape(-1, 1), 'k.')
plt.plot(np.array(matches.res).reshape(-1, 1),
reg.predict(np.array(matches.res).reshape(-1, 1)),
color = 'red')
plt.title("Resume and Job Description Relationship")
plt.xlabel("Resume")
plt.ylabel("Job Description")
plt.show()
blogdown::serve_site()
create.post('convolutions')
getwd()
library(hugo)
library(distill)
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::preview_site()
knitr::opts_chunk$set(echo = TRUE)
library(gridExtra)
library(ggplot2)
library(gridExtra)
library(tidyverse)
library(jpeg)
library(plotly)
library(reticulate)
use_python('/usr/local/bin/python3')
setwd("~/classroom/csci551/final_project")
reticulate::repl_python()
